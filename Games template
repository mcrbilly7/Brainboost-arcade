// All-in-one BrainBoost Arcade Game Suite with Sound, Timers, and Animations import { useState, useEffect, useRef } from "react"; import { useRouter } from "next/router"; import Link from "next/link";

// Utility for playing sounds const playSound = (url) => { const audio = new Audio(url); audio.play(); };

// GAME HUB PAGE export const GameHub = () => { const games = [ { name: "Flashcards", path: "/games/flashcards" }, { name: "Matching", path: "/games/matching" }, { name: "Multiple Choice", path: "/games/multiple-choice" }, { name: "Math Speed", path: "/games/math-speed" }, { name: "Typing Challenge", path: "/games/typing" }, { name: "Word Unscramble", path: "/games/unscramble" }, { name: "Sentence Builder", path: "/games/sentence-builder" }, ];

return ( <div className="p-6 grid grid-cols-2 md:grid-cols-3 gap-4"> {games.map((g, i) => ( <Link key={i} href={g.path}> <div className="p-4 border rounded-xl hover:bg-blue-50 cursor-pointer text-center shadow"> <h2 className="text-lg font-semibold">{g.name}</h2> </div> </Link> ))} </div> ); };

// Flashcard Game with Sound and Animation export const FlashcardGame = ({ cards }) => { const [index, setIndex] = useState(0); const [flipped, setFlipped] = useState(false); const [timeLeft, setTimeLeft] = useState(10); const timerRef = useRef(null);

useEffect(() => { startTimer(); return () => clearInterval(timerRef.current); }, [index]);

const startTimer = () => { setTimeLeft(10); clearInterval(timerRef.current); timerRef.current = setInterval(() => { setTimeLeft((prev) => { if (prev <= 1) { clearInterval(timerRef.current); handleNext(); return 0; } return prev - 1; }); }, 1000); };

const handleFlip = () => { setFlipped(!flipped); playSound("/sounds/flip.mp3"); };

const handleNext = () => { setFlipped(false); setIndex((index + 1) % cards.length); playSound("/sounds/next.mp3"); };

return ( <div className="p-4 text-center"> <div className={w-64 h-40 mx-auto flex items-center justify-center border rounded-xl cursor-pointer shadow-md transition-transform duration-500 transform ${flipped ? "rotate-y-180" : ""}} onClick={handleFlip} > <h2 className="text-xl font-bold">{flipped ? cards[index].answer : cards[index].question}</h2> </div> <p className="mt-2 text-gray-600">Time left: {timeLeft}s</p> <button
className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
onClick={handleNext}
> Next </button> </div> ); };

